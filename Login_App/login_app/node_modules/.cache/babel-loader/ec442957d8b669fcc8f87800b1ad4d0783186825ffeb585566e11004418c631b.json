{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\DoctorChat.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorChat = ({\n  user\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const {\n    userId\n  } = useParams(); // Only userId is needed for the DoctorChat component\n\n  useEffect(() => {\n    const socket = io(`http://localhost:9002/doctor-chat/${userId}`);\n    console.log('Attempting to connect to WebSocket server...');\n    socket.emit('join', {\n      userId: user._id\n    }); // Send only the userId to join the room\n\n    socket.on('message', message => {\n      console.log('Received message:', message);\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      socket.disconnect(); // Disconnect when component unmounts\n    };\n  }, [user._id, userId]); // Include userId in the dependency array\n\n  const handleMessageSend = () => {\n    if (message.trim()) {\n      // Connect to server\n      socket.emit('sendMessage', {\n        userId: user._id,\n        doctorId: userId,\n        message\n      }); // Send message to the user with userId\n      setMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctor-chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"doctor-chat-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: msg.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), \": \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"doctor-chat-input\",\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"doctor-chat-send-button\",\n      onClick: handleMessageSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorChat, \"pTanT21bU3JOeVqUSL36Yj52lDM=\", true);\n_c = DoctorChat;\nvar _c;\n$RefreshReg$(_c, \"DoctorChat\");","map":{"version":3,"names":["DoctorChat","user","_s","message","setMessage","useState","messages","setMessages","userId","useParams","useEffect","socket","io","console","log","emit","_id","on","prevMessages","disconnect","handleMessageSend","trim","doctorId","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","text","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/DoctorChat.js"],"sourcesContent":["const DoctorChat = ({ user }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const { userId } = useParams(); // Only userId is needed for the DoctorChat component\r\n\r\n  useEffect(() => {\r\n    const socket = io(`http://localhost:9002/doctor-chat/${userId}`); \r\n    console.log('Attempting to connect to WebSocket server...');\r\n    socket.emit('join', { userId: user._id }); // Send only the userId to join the room\r\n  \r\n    socket.on('message', message => {\r\n      console.log('Received message:', message);\r\n      setMessages(prevMessages => [...prevMessages, message]);\r\n    });\r\n\r\n    return () => {\r\n      console.log('Cleaning up WebSocket connection...');\r\n      socket.disconnect(); // Disconnect when component unmounts\r\n    };\r\n  }, [user._id, userId]); // Include userId in the dependency array\r\n\r\n  const handleMessageSend = () => {\r\n    if (message.trim()) {\r\n      // Connect to server\r\n      socket.emit('sendMessage', { userId: user._id, doctorId: userId, message }); // Send message to the user with userId\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"doctor-chat-container\">\r\n      <h2>Chat with User</h2>\r\n      <div className=\"doctor-chat-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div className=\"doctor-chat-message\" key={index}>\r\n            <strong>{msg.user}</strong>: {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        className=\"doctor-chat-input\"\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={e => setMessage(e.target.value)}\r\n      />\r\n      <button className=\"doctor-chat-send-button\" onClick={handleMessageSend}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}