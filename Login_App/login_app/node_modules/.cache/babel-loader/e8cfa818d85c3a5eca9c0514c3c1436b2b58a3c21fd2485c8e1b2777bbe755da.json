{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\UserChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport './UserChat.css'; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserChat = user => {\n  _s();\n  console.log(user.user);\n  const {\n    userId,\n    doctorId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [file, setFile] = useState(null);\n  const socket = useRef(null); // Store socket instance in a ref\n\n  const messageInputRef = useRef(null);\n  useEffect(() => {\n    // Initialize socket connection only once\n    socket.current = io('http://localhost:9002', {\n      query: {\n        userId: user.user\n      }\n    });\n\n    // Retrieve initial messages\n    socket.current.emit('getMessages', {\n      userId,\n      doctorId\n    });\n\n    // Listen for new messages\n    socket.current.on('messages', initialMessages => {\n      setMessages(initialMessages);\n    });\n\n    // Log when setting up the event listener for incoming messages\n    console.log(\"Setting up event listener for incoming messages\");\n\n    // Listen for incoming messages\n    socket.current.on('message', message => {\n      console.log(\"Received message:\", message);\n      setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\n    });\n\n    // Listen for incoming file messages\n    socket.current.on('fileSent', fileMessage => {\n      console.log(\"Received file message:\", fileMessage);\n      setMessages(prevMessages => [...prevMessages, fileMessage]); // Append the new file message to the list\n    });\n\n    // Clean up event listeners\n    return () => {\n      if (socket.current) {\n        socket.current.off('messages');\n        socket.current.off('message');\n        socket.current.off('fileSent');\n      }\n    };\n  }, [doctorId, userId, user.user]);\n  // Inside handleMessageSend function\n  // Inside handleMessageSend function\n  const handleMessageSend = () => {\n    if (newMessage.trim() === '' && !file) return;\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      axios.post('http://localhost:9002/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        const fileData = response.data.fileData;\n        const message = {\n          userId: userId,\n          doctorId: doctorId,\n          content: fileData,\n          fileName: file.name,\n          isFile: true // Set isFile to true for file messages\n        };\n\n        socket.current.emit('sendMessage', message);\n      }).catch(error => {\n        console.error('Error uploading file:', error);\n      });\n    } else {\n      // If it's a text message, directly emit it with isFile set to false\n      socket.current.emit('sendMessage', {\n        userId,\n        doctorId,\n        content: newMessage,\n        isFile: false\n      });\n    }\n    setNewMessage('');\n    setFile(null);\n    messageInputRef.current.focus();\n  };\n\n  // Inside renderFile function\n  const renderFile = fileMessage => {\n    const fileName = fileMessage.fileName; // Extract the file name\n    const downloadUrl = `http://localhost:9002/uploads/${fileMessage.content}`; // Construct the download URL\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"File: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: downloadUrl,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"View File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: downloadUrl,\n        download: fileName,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this);\n  };\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map(message => {\n        console.log(\"Is file:\", message.isFile);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.senderId === user.user ? 'left' : 'right'}`,\n          children: message.isFile ?\n          // Call renderFile for file messages\n          renderFile(message) :\n          /*#__PURE__*/\n          // Display text message\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"message-content\",\n              children: message.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-timestamp\",\n              children: message.createdAt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        ref: messageInputRef,\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSend,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n_s(UserChat, \"MiPIWFLwwVYMHGQx0l4ilIqgMu8=\", false, function () {\n  return [useParams];\n});\n_c = UserChat;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","io","jsxDEV","_jsxDEV","Fragment","_Fragment","UserChat","user","_s","console","log","userId","doctorId","messages","setMessages","newMessage","setNewMessage","file","setFile","socket","messageInputRef","current","query","emit","on","initialMessages","message","prevMessages","fileMessage","off","handleMessageSend","trim","formData","FormData","append","axios","post","headers","then","response","fileData","data","content","fileName","name","isFile","catch","error","focus","renderFile","downloadUrl","children","_jsxFileName","lineNumber","columnNumber","href","target","rel","download","handleFileChange","e","selectedFile","files","className","map","senderId","createdAt","_id","type","value","onChange","ref","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/UserChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport './UserChat.css'; // Import CSS file\r\n\r\nconst UserChat = (user) => {\r\n    console.log(user.user);\r\n    const { userId, doctorId } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [file, setFile] = useState(null);\r\n    const socket = useRef(null); // Store socket instance in a ref\r\n\r\n    const messageInputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Initialize socket connection only once\r\n        socket.current = io('http://localhost:9002', {\r\n            query: {\r\n                userId: user.user,\r\n            }\r\n        });\r\n\r\n        // Retrieve initial messages\r\n        socket.current.emit('getMessages', { userId, doctorId });\r\n\r\n        // Listen for new messages\r\n        socket.current.on('messages', (initialMessages) => {\r\n            setMessages(initialMessages);\r\n        });\r\n\r\n        // Log when setting up the event listener for incoming messages\r\n        console.log(\"Setting up event listener for incoming messages\");\r\n\r\n        // Listen for incoming messages\r\n        socket.current.on('message', (message) => {\r\n            console.log(\"Received message:\", message);\r\n            setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\r\n        });\r\n\r\n        // Listen for incoming file messages\r\n        socket.current.on('fileSent', (fileMessage) => {\r\n            console.log(\"Received file message:\", fileMessage);\r\n            setMessages(prevMessages => [...prevMessages, fileMessage]); // Append the new file message to the list\r\n        });\r\n\r\n        // Clean up event listeners\r\n        return () => {\r\n            if (socket.current) {\r\n                socket.current.off('messages');\r\n                socket.current.off('message');\r\n                socket.current.off('fileSent');\r\n            }\r\n        };\r\n    }, [doctorId, userId, user.user]);\r\n// Inside handleMessageSend function\r\n// Inside handleMessageSend function\r\nconst handleMessageSend = () => {\r\n    if (newMessage.trim() === '' && !file) return;\r\n\r\n    if (file) {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        axios.post('http://localhost:9002/upload', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => {\r\n            const fileData = response.data.fileData;\r\n\r\n            const message = {\r\n                userId: userId,\r\n                doctorId: doctorId,\r\n                content: fileData,\r\n                fileName: file.name,\r\n                isFile: true, // Set isFile to true for file messages\r\n            };\r\n\r\n            socket.current.emit('sendMessage', message);\r\n        }).catch(error => {\r\n            console.error('Error uploading file:', error);\r\n        });\r\n    } else {\r\n        // If it's a text message, directly emit it with isFile set to false\r\n        socket.current.emit('sendMessage', { userId, doctorId, content: newMessage, isFile: false });\r\n    }\r\n\r\n    setNewMessage('');\r\n    setFile(null);\r\n    messageInputRef.current.focus();\r\n};\r\n\r\n// Inside renderFile function\r\nconst renderFile = (fileMessage) => {\r\n    const fileName = fileMessage.fileName; // Extract the file name\r\n    const downloadUrl = `http://localhost:9002/uploads/${fileMessage.content}`; // Construct the download URL\r\n\r\n    return (\r\n        <div>\r\n            <p>File: {fileName}</p>\r\n            <a href={downloadUrl} target=\"_blank\" rel=\"noopener noreferrer\">View File</a>\r\n            <a href={downloadUrl} download={fileName}>Download</a>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n    const handleFileChange = (e) => {\r\n        const selectedFile = e.target.files[0];\r\n        setFile(selectedFile);\r\n    };\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className=\"user-chat-container\">\r\n            <h2>Chat</h2>\r\n          \r\n            <div className=\"chat-messages\">\r\n            {messages.map((message) => {\r\n    console.log(\"Is file:\", message.isFile);\r\n    return (\r\n        <div key={message._id} className={`message ${message.senderId === user.user ? 'left' : 'right'}`}>\r\n            {message.isFile ? (\r\n                // Call renderFile for file messages\r\n                renderFile(message)\r\n            ) : (\r\n                // Display text message\r\n                <>\r\n                    <p className=\"message-content\">{message.content}</p>\r\n                    <span className=\"message-timestamp\">{message.createdAt}</span>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n})}\r\n            </div>\r\n\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    ref={messageInputRef}\r\n                    className=\"message-input\"\r\n                />\r\n                <input type=\"file\" onChange={handleFileChange} />\r\n                <button onClick={handleMessageSend} className=\"send-button\">Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserChat;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}