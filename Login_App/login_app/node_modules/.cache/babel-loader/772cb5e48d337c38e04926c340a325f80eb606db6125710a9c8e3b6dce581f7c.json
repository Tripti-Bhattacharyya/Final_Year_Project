{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\UserChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport './UserChat.css'; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserChat = user => {\n  _s();\n  console.log(user.user);\n  const {\n    userId,\n    doctorId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [file, setFile] = useState(null);\n  const [fileBase64String, setFileBase64String] = useState(\"\");\n  const socket = useRef(null); // Store socket instance in a ref\n\n  const messageInputRef = useRef(null);\n  useEffect(() => {\n    // Initialize socket connection only once\n    socket.current = io('http://localhost:9002', {\n      query: {\n        userId: user.user\n      }\n    });\n\n    // Retrieve initial messages\n    socket.current.emit('getMessages', {\n      userId,\n      doctorId\n    });\n\n    // Listen for new messages\n    socket.current.on('messages', initialMessages => {\n      setMessages(initialMessages);\n    });\n\n    // Log when setting up the event listener for incoming messages\n    console.log(\"Setting up event listener for incoming messages\");\n\n    // Listen for incoming messages\n    socket.current.on('message', message => {\n      console.log(\"Received message:\", message);\n      setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\n    });\n\n    // Listen for incoming file messages\n    socket.current.on('fileSent', fileMessage => {\n      console.log(\"Received file message:\", fileMessage);\n      setMessages(prevMessages => [...prevMessages, fileMessage]); // Append the new file message to the list\n    });\n\n    // Clean up event listeners\n    return () => {\n      if (socket.current) {\n        socket.current.off('messages');\n        socket.current.off('message');\n        socket.current.off('fileSent');\n      }\n    };\n  }, [doctorId, userId, user.user]);\n  const handleMessageSend = () => {\n    if (newMessage.trim() === '' && !file) return;\n    if (file) {\n      // Read the file as a buffer\n      const reader = new FileReader();\n      reader.onload = () => {\n        const fileData = reader.result;\n\n        // Create a new WebSocket message to send the file data\n        const message = {\n          userId: userId,\n          doctorId: doctorId,\n          content: fileData,\n          fileName: file.name,\n          // Add file name\n          isFile: true // Add a flag to identify file messages\n        };\n\n        // Emit the message to the backend via WebSocket\n        socket.current.emit('sendMessage', message); // Use sendMessage for both text and file messages\n      };\n\n      reader.readAsDataURL(file); // Read the file as Data URL\n    } else {\n      // If it's a text message, directly emit it\n      socket.current.emit('sendMessage', {\n        userId,\n        doctorId,\n        content: newMessage\n      });\n    }\n    setNewMessage('');\n    setFile(null);\n    // Focus the input field after sending the message\n    messageInputRef.current.focus();\n  };\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n  };\n  const renderFile = fileMessage => {\n    // Decode the Base64 string to display the file content\n    const decodedFile = decodeURIComponent(atob(fileMessage.content).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    fileBase64String = fileMessage.content;\n    const decodeBase64 = decodedFile(fileBase64String.substring(fileBase64String.indexOf(\",\") + 1));\n\n    // Determine the appropriate content type\n    const contentType = fileMessage.content.split(',')[0].split(':')[1].split(';')[0];\n\n    // Display different file types accordingly\n    switch (contentType) {\n      case 'image/jpg':\n      case 'image/jpeg':\n      case 'image/png':\n        // For images, display them using the decoded binary data\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:${contentType};${decodeBase64}`,\n          alt: fileMessage.fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 24\n        }, this);\n      case 'application/pdf':\n        // For PDFs, display them using an embed tag\n        return /*#__PURE__*/_jsxDEV(\"embed\", {\n          src: `data:${contentType};base64,${fileMessage.content}`,\n          type: contentType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 24\n        }, this);\n      default:\n        // For other file types, provide a download link\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File type: \", contentType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `data:${contentType};${decodeBase64}`,\n            download: fileMessage.fileName,\n            children: [\"Download \", fileMessage.fileName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.senderId === user.user ? 'left' : 'right'}`,\n        children: message.isFile ?\n        // Check if the message is a file\n        // Render the file content\n        renderFile(message) :\n        /*#__PURE__*/\n        // Display text message\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-content\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-timestamp\",\n            children: message.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        ref: messageInputRef,\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSend,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n_s(UserChat, \"lhCEHrPgCYy8iJckeM6dAwsxjL4=\", false, function () {\n  return [useParams];\n});\n_c = UserChat;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","io","jsxDEV","_jsxDEV","Fragment","_Fragment","UserChat","user","_s","console","log","userId","doctorId","messages","setMessages","newMessage","setNewMessage","file","setFile","fileBase64String","setFileBase64String","socket","messageInputRef","current","query","emit","on","initialMessages","message","prevMessages","fileMessage","off","handleMessageSend","trim","reader","FileReader","onload","fileData","result","content","fileName","name","isFile","readAsDataURL","focus","handleFileChange","e","selectedFile","target","files","renderFile","decodedFile","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","decodeBase64","substring","indexOf","contentType","src","alt","_jsxFileName","lineNumber","columnNumber","type","children","href","download","className","senderId","createdAt","_id","value","onChange","ref","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/UserChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport './UserChat.css'; // Import CSS file\r\n\r\nconst UserChat = (user) => {\r\n    console.log(user.user);\r\n    const { userId, doctorId } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [file, setFile] = useState(null);\r\n    const [fileBase64String, setFileBase64String] = useState(\"\");\r\n\r\n    const socket = useRef(null); // Store socket instance in a ref\r\n\r\n    const messageInputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Initialize socket connection only once\r\n        socket.current = io('http://localhost:9002', {\r\n            query: {\r\n                userId: user.user,\r\n            }\r\n        });\r\n\r\n        // Retrieve initial messages\r\n        socket.current.emit('getMessages', { userId, doctorId });\r\n\r\n        // Listen for new messages\r\n        socket.current.on('messages', (initialMessages) => {\r\n            setMessages(initialMessages);\r\n        });\r\n\r\n        // Log when setting up the event listener for incoming messages\r\n        console.log(\"Setting up event listener for incoming messages\");\r\n\r\n        // Listen for incoming messages\r\n        socket.current.on('message', (message) => {\r\n            console.log(\"Received message:\", message);\r\n            setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\r\n        });\r\n\r\n        // Listen for incoming file messages\r\n        socket.current.on('fileSent', (fileMessage) => {\r\n            console.log(\"Received file message:\", fileMessage);\r\n            setMessages(prevMessages => [...prevMessages, fileMessage]); // Append the new file message to the list\r\n        });\r\n\r\n        // Clean up event listeners\r\n        return () => {\r\n            if (socket.current) {\r\n                socket.current.off('messages');\r\n                socket.current.off('message');\r\n                socket.current.off('fileSent');\r\n            }\r\n        };\r\n    }, [doctorId, userId, user.user]);\r\n\r\n    const handleMessageSend = () => {\r\n        if (newMessage.trim() === '' && !file) return;\r\n\r\n        if (file) {\r\n            // Read the file as a buffer\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const fileData = reader.result;\r\n\r\n                // Create a new WebSocket message to send the file data\r\n                const message = {\r\n                    userId: userId,\r\n                    doctorId: doctorId,\r\n                    content: fileData,\r\n                    fileName: file.name, // Add file name\r\n                    isFile: true, // Add a flag to identify file messages\r\n                };\r\n\r\n                // Emit the message to the backend via WebSocket\r\n                socket.current.emit('sendMessage', message); // Use sendMessage for both text and file messages\r\n            };\r\n            reader.readAsDataURL(file); // Read the file as Data URL\r\n        } else {\r\n            // If it's a text message, directly emit it\r\n            socket.current.emit('sendMessage', { userId, doctorId, content: newMessage });\r\n        }\r\n\r\n        setNewMessage('');\r\n        setFile(null);\r\n        // Focus the input field after sending the message\r\n        messageInputRef.current.focus();\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const selectedFile = e.target.files[0];\r\n        setFile(selectedFile);\r\n    };\r\n\r\n    const renderFile = (fileMessage) => {\r\n        // Decode the Base64 string to display the file content\r\n        const decodedFile = decodeURIComponent(\r\n            atob(fileMessage.content)\r\n              .split(\"\")\r\n              .map(function (c) {\r\n                return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n              })\r\n              .join(\"\")\r\n          );\r\n          fileBase64String=fileMessage.content;\r\n          const decodeBase64 = decodedFile(\r\n            fileBase64String.substring(fileBase64String.indexOf(\",\") + 1)\r\n          );\r\n    \r\n        // Determine the appropriate content type\r\n        const contentType = fileMessage.content.split(',')[0].split(':')[1].split(';')[0];\r\n    \r\n        // Display different file types accordingly\r\n        switch (contentType) {\r\n            case 'image/jpg':\r\n            case 'image/jpeg':\r\n            case 'image/png':\r\n                // For images, display them using the decoded binary data\r\n                return <img src={`data:${contentType};${decodeBase64}`} alt={fileMessage.fileName} />;\r\n            case 'application/pdf':\r\n                // For PDFs, display them using an embed tag\r\n                return <embed src={`data:${contentType};base64,${fileMessage.content}`} type={contentType} />;\r\n            default:\r\n                // For other file types, provide a download link\r\n                return (\r\n                    <div>\r\n                        <p>File type: {contentType}</p>\r\n                        <a href={`data:${contentType};${decodeBase64}`} download={fileMessage.fileName}>Download {fileMessage.fileName}</a>\r\n                    </div>\r\n                );\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    return (\r\n        <div className=\"user-chat-container\">\r\n            <h2>Chat</h2>\r\n          \r\n            <div className=\"chat-messages\">\r\n                {messages.map((message) => (\r\n                    <div key={message._id} className={`message ${message.senderId === user.user ? 'left' : 'right'}`}>\r\n                        {message.isFile ? ( // Check if the message is a file\r\n                            // Render the file content\r\n                            renderFile(message)\r\n                        ) : (\r\n                            // Display text message\r\n                            <>\r\n                                <p className=\"message-content\">{message.content}</p>\r\n                                <span className=\"message-timestamp\">{message.createdAt}</span>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    ref={messageInputRef}\r\n                    className=\"message-input\"\r\n                />\r\n                <input type=\"file\" onChange={handleFileChange} />\r\n                <button onClick={handleMessageSend} className=\"send-button\">Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserChat;\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAO,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzB,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACvBC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACA,IAAI,CAAC;EACtB,MAAM;IAAEI,MAAM;IAAEC;EAAS,CAAC,GAAGZ,SAAS,CAAC,CAAC;EACxC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACsB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMwB,MAAM,GAAGtB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE7B,MAAMuB,eAAe,GAAGvB,MAAM,CAAC,IAAI,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACZ;IACAuB,MAAM,CAACE,OAAO,GAAGtB,EAAE,CAAC,uBAAuB,EAAE;MACzCuB,KAAK,EAAE;QACHb,MAAM,EAAEJ,IAAI,CAACA;MACjB;IACJ,CAAC,CAAC;;IAEF;IACAc,MAAM,CAACE,OAAO,CAACE,IAAI,CAAC,aAAa,EAAE;MAAEd,MAAM;MAAEC;IAAS,CAAC,CAAC;;IAExD;IACAS,MAAM,CAACE,OAAO,CAACG,EAAE,CAAC,UAAU,EAAGC,eAAe,IAAK;MAC/Cb,WAAW,CAACa,eAAe,CAAC;IAChC,CAAC,CAAC;;IAEF;IACAlB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;IAE9D;IACAW,MAAM,CAACE,OAAO,CAACG,EAAE,CAAC,SAAS,EAAGE,OAAO,IAAK;MACtCnB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEkB,OAAO,CAAC;MACzCd,WAAW,CAACe,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAED,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC;;IAEF;IACAP,MAAM,CAACE,OAAO,CAACG,EAAE,CAAC,UAAU,EAAGI,WAAW,IAAK;MAC3CrB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEoB,WAAW,CAAC;MAClDhB,WAAW,CAACe,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEC,WAAW,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACT,IAAIT,MAAM,CAACE,OAAO,EAAE;QAChBF,MAAM,CAACE,OAAO,CAACQ,GAAG,CAAC,UAAU,CAAC;QAC9BV,MAAM,CAACE,OAAO,CAACQ,GAAG,CAAC,SAAS,CAAC;QAC7BV,MAAM,CAACE,OAAO,CAACQ,GAAG,CAAC,UAAU,CAAC;MAClC;IACJ,CAAC;EACL,CAAC,EAAE,CAACnB,QAAQ,EAAED,MAAM,EAAEJ,IAAI,CAACA,IAAI,CAAC,CAAC;EAEjC,MAAMyB,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAIjB,UAAU,CAACkB,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAChB,IAAI,EAAE;IAEvC,IAAIA,IAAI,EAAE;MACN;MACA,MAAMiB,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QAClB,MAAMC,QAAQ,GAAGH,MAAM,CAACI,MAAM;;QAE9B;QACA,MAAMV,OAAO,GAAG;UACZjB,MAAM,EAAEA,MAAM;UACdC,QAAQ,EAAEA,QAAQ;UAClB2B,OAAO,EAAEF,QAAQ;UACjBG,QAAQ,EAAEvB,IAAI,CAACwB,IAAI;UAAE;UACrBC,MAAM,EAAE,IAAI,CAAE;QAClB,CAAC;;QAED;QACArB,MAAM,CAACE,OAAO,CAACE,IAAI,CAAC,aAAa,EAAEG,OAAO,CAAC,CAAC,CAAC;MACjD,CAAC;;MACDM,MAAM,CAACS,aAAa,CAAC1B,IAAI,CAAC,CAAC,CAAC;IAChC,CAAC,MAAM;MACH;MACAI,MAAM,CAACE,OAAO,CAACE,IAAI,CAAC,aAAa,EAAE;QAAEd,MAAM;QAAEC,QAAQ;QAAE2B,OAAO,EAAExB;MAAW,CAAC,CAAC;IACjF;IAEAC,aAAa,CAAC,EAAE,CAAC;IACjBE,OAAO,CAAC,IAAI,CAAC;IACb;IACAI,eAAe,CAACC,OAAO,CAACqB,KAAK,CAAC,CAAC;EACnC,CAAC;EAED,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,YAAY,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACtC/B,OAAO,CAAC6B,YAAY,CAAC;EACzB,CAAC;EAED,MAAMG,UAAU,GAAIpB,WAAW,IAAK;IAChC;IACA,MAAMqB,WAAW,GAAGC,kBAAkB,CAClCC,IAAI,CAACvB,WAAW,CAACS,OAAO,CAAC,CACtBe,KAAK,CAAC,EAAE,CAAC,CACTC,GAAG,CAAC,UAAUC,CAAC,EAAE;MAChB,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CACDC,IAAI,CAAC,EAAE,CACZ,CAAC;IACDzC,gBAAgB,GAACW,WAAW,CAACS,OAAO;IACpC,MAAMsB,YAAY,GAAGV,WAAW,CAC9BhC,gBAAgB,CAAC2C,SAAS,CAAC3C,gBAAgB,CAAC4C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAC9D,CAAC;;IAEH;IACA,MAAMC,WAAW,GAAGlC,WAAW,CAACS,OAAO,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEjF;IACA,QAAQU,WAAW;MACf,KAAK,WAAW;MAChB,KAAK,YAAY;MACjB,KAAK,WAAW;QACZ;QACA,oBAAO7D,OAAA;UAAK8D,GAAG,EAAG,QAAOD,WAAY,IAAGH,YAAa,EAAE;UAACK,GAAG,EAAEpC,WAAW,CAACU;QAAS;UAAAA,QAAA,EAAA2B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACzF,KAAK,iBAAiB;QAClB;QACA,oBAAOlE,OAAA;UAAO8D,GAAG,EAAG,QAAOD,WAAY,WAAUlC,WAAW,CAACS,OAAQ,EAAE;UAAC+B,IAAI,EAAEN;QAAY;UAAAxB,QAAA,EAAA2B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACjG;QACI;QACA,oBACIlE,OAAA;UAAAoE,QAAA,gBACIpE,OAAA;YAAAoE,QAAA,GAAG,aAAW,EAACP,WAAW;UAAA;YAAAxB,QAAA,EAAA2B,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/BlE,OAAA;YAAGqE,IAAI,EAAG,QAAOR,WAAY,IAAGH,YAAa,EAAE;YAACY,QAAQ,EAAE3C,WAAW,CAACU,QAAS;YAAA+B,QAAA,GAAC,WAAS,EAACzC,WAAW,CAACU,QAAQ;UAAA;YAAAA,QAAA,EAAA2B,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAA7B,QAAA,EAAA2B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClH,CAAC;IAElB;EACJ,CAAC;EAID,oBACIlE,OAAA;IAAKuE,SAAS,EAAC,qBAAqB;IAAAH,QAAA,gBAChCpE,OAAA;MAAAoE,QAAA,EAAI;IAAI;MAAA/B,QAAA,EAAA2B,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEblE,OAAA;MAAKuE,SAAS,EAAC,eAAe;MAAAH,QAAA,EACzB1D,QAAQ,CAAC0C,GAAG,CAAE3B,OAAO,iBAClBzB,OAAA;QAAuBuE,SAAS,EAAG,WAAU9C,OAAO,CAAC+C,QAAQ,KAAKpE,IAAI,CAACA,IAAI,GAAG,MAAM,GAAG,OAAQ,EAAE;QAAAgE,QAAA,EAC5F3C,OAAO,CAACc,MAAM;QAAK;QAChB;QACAQ,UAAU,CAACtB,OAAO,CAAC;QAAA;QAEnB;QACAzB,OAAA,CAAAE,SAAA;UAAAkE,QAAA,gBACIpE,OAAA;YAAGuE,SAAS,EAAC,iBAAiB;YAAAH,QAAA,EAAE3C,OAAO,CAACW;UAAO;YAAAC,QAAA,EAAA2B,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpDlE,OAAA;YAAMuE,SAAS,EAAC,mBAAmB;YAAAH,QAAA,EAAE3C,OAAO,CAACgD;UAAS;YAAApC,QAAA,EAAA2B,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,eAChE;MACL,GAVKzC,OAAO,CAACiD,GAAG;QAAArC,QAAA,EAAA2B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWhB,CACR;IAAC;MAAA7B,QAAA,EAAA2B,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENlE,OAAA;MAAKuE,SAAS,EAAC,iBAAiB;MAAAH,QAAA,gBAC5BpE,OAAA;QACImE,IAAI,EAAC,MAAM;QACXQ,KAAK,EAAE/D,UAAW;QAClBgE,QAAQ,EAAGjC,CAAC,IAAK9B,aAAa,CAAC8B,CAAC,CAACE,MAAM,CAAC8B,KAAK,CAAE;QAC/CE,GAAG,EAAE1D,eAAgB;QACrBoD,SAAS,EAAC;MAAe;QAAAlC,QAAA,EAAA2B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACFlE,OAAA;QAAOmE,IAAI,EAAC,MAAM;QAACS,QAAQ,EAAElC;MAAiB;QAAAL,QAAA,EAAA2B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjDlE,OAAA;QAAQ8E,OAAO,EAAEjD,iBAAkB;QAAC0C,SAAS,EAAC,aAAa;QAAAH,QAAA,EAAC;MAAI;QAAA/B,QAAA,EAAA2B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAA7B,QAAA,EAAA2B,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CAAC;EAAA;IAAA7B,QAAA,EAAA2B,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC7D,EAAA,CAtKIF,QAAQ;EAAA,QAEmBN,SAAS;AAAA;AAAAkF,EAAA,GAFpC5E,QAAQ;AAwKd,eAAeA,QAAQ;AAAC,IAAA4E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}