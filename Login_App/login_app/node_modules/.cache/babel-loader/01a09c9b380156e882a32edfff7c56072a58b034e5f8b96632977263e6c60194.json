{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\UserChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport './UserChat.css'; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserChat = user => {\n  _s();\n  console.log(user.user);\n  const {\n    userId,\n    doctorId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const socket = useRef(null); // Store socket instance in a ref\n\n  const messageInputRef = useRef(null);\n  u;\n  useEffect(() => {\n    // Initialize socket connection only once\n    socket.current = io('http://localhost:9002', {\n      query: {\n        userId: user.user\n      }\n    });\n\n    // Retrieve initial messages\n    socket.current.emit('getMessages', {\n      userId,\n      doctorId\n    });\n\n    // Listen for new messages\n    socket.current.on('messages', messages => {\n      setMessages(messages);\n    });\n\n    // Listen for incoming messages\n    socket.current.on('message', handleNewMessage);\n\n    // Clean up event listeners\n    return () => {\n      if (socket.current) {\n        socket.current.off('messages');\n        socket.current.off('message', handleNewMessage);\n      }\n    };\n  }, [doctorId, userId, user.user]);\n  const handleNewMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\n  };\n\n  const handleMessageSend = () => {\n    if (newMessage.trim() === '') return;\n    socket.current.emit('sendMessage', {\n      userId,\n      doctorId,\n      content: newMessage\n    });\n    setNewMessage('');\n    // Focus the input field after sending the message\n    messageInputRef.current.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.senderId === user.user ? 'left' : 'right'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-timestamp\",\n          children: message.createdAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        ref: messageInputRef,\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSend,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(UserChat, \"QOvEgSY6IfAorT2djQBaxAxcsz0=\", false, function () {\n  return [useParams];\n});\n_c = UserChat;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","io","jsxDEV","_jsxDEV","UserChat","user","_s","console","log","userId","doctorId","messages","setMessages","newMessage","setNewMessage","socket","messageInputRef","u","current","query","emit","on","handleNewMessage","off","message","prevMessages","handleMessageSend","trim","content","focus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","senderId","createdAt","type","value","onChange","e","target","ref","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/UserChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport './UserChat.css'; // Import CSS file\r\n\r\nconst UserChat = (user) => {\r\n    console.log(user.user);\r\n    const { userId, doctorId } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const socket = useRef(null); // Store socket instance in a ref\r\n\r\n    const messageInputRef = useRef(null);\r\n\r\n    u\r\n    useEffect(() => {\r\n        // Initialize socket connection only once\r\n        socket.current = io('http://localhost:9002', {\r\n            query: {\r\n                userId: user.user,\r\n            }\r\n        });\r\n\r\n        // Retrieve initial messages\r\n        socket.current.emit('getMessages', { userId, doctorId });\r\n\r\n        // Listen for new messages\r\n        socket.current.on('messages', (messages) => {\r\n            setMessages(messages);\r\n        });\r\n\r\n        // Listen for incoming messages\r\n        socket.current.on('message', handleNewMessage);\r\n\r\n        // Clean up event listeners\r\n        return () => {\r\n            if (socket.current) {\r\n                socket.current.off('messages');\r\n                socket.current.off('message', handleNewMessage);\r\n            }\r\n        };\r\n    }, [doctorId, userId, user.user]);\r\n\r\n    const handleNewMessage = (message) => {\r\n        setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\r\n    };\r\n\r\n    const handleMessageSend = () => {\r\n        if (newMessage.trim() === '') return;\r\n        socket.current.emit('sendMessage', { userId, doctorId, content: newMessage });\r\n        setNewMessage('');\r\n        // Focus the input field after sending the message\r\n        messageInputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-chat-container\">\r\n            <h2>Chat</h2>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className={`message ${message.senderId === user.user ? 'left' : 'right'}`}>\r\n                        <p className=\"message-content\">{message.content}</p>\r\n                        <span className=\"message-timestamp\">{message.createdAt}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    ref={messageInputRef}\r\n                    className=\"message-input\"\r\n                />\r\n                <button onClick={handleMessageSend} className=\"send-button\">Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserChat;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}