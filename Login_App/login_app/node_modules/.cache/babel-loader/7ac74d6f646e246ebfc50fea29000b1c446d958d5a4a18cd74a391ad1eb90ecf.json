{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\UserChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport './UserChat.css'; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserChat = user => {\n  _s();\n  console.log(user.user);\n  const {\n    userId,\n    doctorId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [file, setFile] = useState(null);\n  const socket = useRef(null); // Store socket instance in a ref\n\n  const messageInputRef = useRef(null);\n  useEffect(() => {\n    // Initialize socket connection only once\n    socket.current = io('http://localhost:9002', {\n      query: {\n        userId: user.user\n      }\n    });\n\n    // Retrieve initial messages\n    socket.current.emit('getMessages', {\n      userId,\n      doctorId\n    });\n\n    // Listen for new messages\n    socket.current.on('messages', initialMessages => {\n      setMessages(initialMessages);\n    });\n\n    // Log when setting up the event listener for incoming messages\n    console.log(\"Setting up event listener for incoming messages\");\n\n    // Listen for incoming messages\n    socket.current.on('message', message => {\n      console.log(\"Received message:\", message);\n      setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\n    });\n\n    // Listen for incoming file messages\n    socket.current.on('fileSent', fileMessage => {\n      console.log(\"Received file message:\", fileMessage);\n      setMessages(prevMessages => [...prevMessages, fileMessage]); // Append the new file message to the list\n    });\n\n    // Clean up event listeners\n    return () => {\n      if (socket.current) {\n        socket.current.off('messages');\n        socket.current.off('message');\n        socket.current.off('fileSent');\n      }\n    };\n  }, [doctorId, userId, user.user]);\n  const handleMessageSend = () => {\n    if (newMessage.trim() === '' && !file) return;\n    if (file) {\n      // Read the file as a buffer\n      const reader = new FileReader();\n      reader.onload = () => {\n        const fileData = reader.result;\n\n        // Create a new WebSocket message to send the file data\n        const message = {\n          userId: userId,\n          doctorId: doctorId,\n          content: fileData,\n          fileName: file.name,\n          // Add file name\n          isFile: true // Add a flag to identify file messages\n        };\n\n        // Emit the message to the backend via WebSocket\n        socket.current.emit('sendMessage', message); // Use sendMessage for both text and file messages\n      };\n\n      reader.readAsDataURL(file); // Read the file as Data URL\n    } else {\n      // If it's a text message, directly emit it\n      socket.current.emit('sendMessage', {\n        userId,\n        doctorId,\n        content: newMessage\n      });\n    }\n    setNewMessage('');\n    setFile(null);\n    // Focus the input field after sending the message\n    messageInputRef.current.focus();\n  };\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n  };\n  const renderFile = fileMessage => {\n    // Create a blob from the Base64 encoded PDF data\n    const blob = base64toBlob(fileMessage.content, 'application/pdf');\n\n    // Generate a URL for the blob\n    const pdfUrl = URL.createObjectURL(blob);\n\n    // Display the PDF using an embed tag\n    return /*#__PURE__*/_jsxDEV(\"embed\", {\n      src: pdfUrl,\n      type: \"application/pdf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Function to convert Base64 to Blob\n  const base64toBlob = (base64Data, contentType) => {\n    const byteCharacters = atob(base64Data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    return new Blob([byteArray], {\n      type: contentType\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.senderId === user.user ? 'left' : 'right'}`,\n        children: message.isFile ?\n        // Check if the message is a file\n        // Render the file content\n        renderFile(message) :\n        /*#__PURE__*/\n        // Display text message\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-content\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-timestamp\",\n            children: message.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        ref: messageInputRef,\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSend,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(UserChat, \"MiPIWFLwwVYMHGQx0l4ilIqgMu8=\", false, function () {\n  return [useParams];\n});\n_c = UserChat;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","io","jsxDEV","_jsxDEV","Fragment","_Fragment","UserChat","user","_s","console","log","userId","doctorId","messages","setMessages","newMessage","setNewMessage","file","setFile","socket","messageInputRef","current","query","emit","on","initialMessages","message","prevMessages","fileMessage","off","handleMessageSend","trim","reader","FileReader","onload","fileData","result","content","fileName","name","isFile","readAsDataURL","focus","handleFileChange","e","selectedFile","target","files","renderFile","blob","base64toBlob","pdfUrl","URL","createObjectURL","src","type","_jsxFileName","lineNumber","columnNumber","base64Data","contentType","byteCharacters","atob","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","className","children","map","senderId","createdAt","_id","value","onChange","ref","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/UserChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport './UserChat.css'; // Import CSS file\r\n\r\nconst UserChat = (user) => {\r\n    console.log(user.user);\r\n    const { userId, doctorId } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [file, setFile] = useState(null);\r\n    const socket = useRef(null); // Store socket instance in a ref\r\n\r\n    const messageInputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Initialize socket connection only once\r\n        socket.current = io('http://localhost:9002', {\r\n            query: {\r\n                userId: user.user,\r\n            }\r\n        });\r\n\r\n        // Retrieve initial messages\r\n        socket.current.emit('getMessages', { userId, doctorId });\r\n\r\n        // Listen for new messages\r\n        socket.current.on('messages', (initialMessages) => {\r\n            setMessages(initialMessages);\r\n        });\r\n\r\n        // Log when setting up the event listener for incoming messages\r\n        console.log(\"Setting up event listener for incoming messages\");\r\n\r\n        // Listen for incoming messages\r\n        socket.current.on('message', (message) => {\r\n            console.log(\"Received message:\", message);\r\n            setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\r\n        });\r\n\r\n        // Listen for incoming file messages\r\n        socket.current.on('fileSent', (fileMessage) => {\r\n            console.log(\"Received file message:\", fileMessage);\r\n            setMessages(prevMessages => [...prevMessages, fileMessage]); // Append the new file message to the list\r\n        });\r\n\r\n        // Clean up event listeners\r\n        return () => {\r\n            if (socket.current) {\r\n                socket.current.off('messages');\r\n                socket.current.off('message');\r\n                socket.current.off('fileSent');\r\n            }\r\n        };\r\n    }, [doctorId, userId, user.user]);\r\n\r\n    const handleMessageSend = () => {\r\n        if (newMessage.trim() === '' && !file) return;\r\n\r\n        if (file) {\r\n            // Read the file as a buffer\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const fileData = reader.result;\r\n\r\n                // Create a new WebSocket message to send the file data\r\n                const message = {\r\n                    userId: userId,\r\n                    doctorId: doctorId,\r\n                    content: fileData,\r\n                    fileName: file.name, // Add file name\r\n                    isFile: true, // Add a flag to identify file messages\r\n                };\r\n\r\n                // Emit the message to the backend via WebSocket\r\n                socket.current.emit('sendMessage', message); // Use sendMessage for both text and file messages\r\n            };\r\n            reader.readAsDataURL(file); // Read the file as Data URL\r\n        } else {\r\n            // If it's a text message, directly emit it\r\n            socket.current.emit('sendMessage', { userId, doctorId, content: newMessage });\r\n        }\r\n\r\n        setNewMessage('');\r\n        setFile(null);\r\n        // Focus the input field after sending the message\r\n        messageInputRef.current.focus();\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const selectedFile = e.target.files[0];\r\n        setFile(selectedFile);\r\n    };\r\n\r\nconst renderFile = (fileMessage) => {\r\n    // Create a blob from the Base64 encoded PDF data\r\n    const blob = base64toBlob(fileMessage.content, 'application/pdf');\r\n\r\n    // Generate a URL for the blob\r\n    const pdfUrl = URL.createObjectURL(blob);\r\n\r\n    // Display the PDF using an embed tag\r\n    return <embed src={pdfUrl} type=\"application/pdf\" />;\r\n};\r\n\r\n// Function to convert Base64 to Blob\r\nconst base64toBlob = (base64Data, contentType) => {\r\n    const byteCharacters = atob(base64Data);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    return new Blob([byteArray], { type: contentType });\r\n};\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"user-chat-container\">\r\n            <h2>Chat</h2>\r\n          \r\n            <div className=\"chat-messages\">\r\n                {messages.map((message) => (\r\n                    <div key={message._id} className={`message ${message.senderId === user.user ? 'left' : 'right'}`}>\r\n                        {message.isFile ? ( // Check if the message is a file\r\n                            // Render the file content\r\n                            renderFile(message)\r\n                        ) : (\r\n                            // Display text message\r\n                            <>\r\n                                <p className=\"message-content\">{message.content}</p>\r\n                                <span className=\"message-timestamp\">{message.createdAt}</span>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    ref={messageInputRef}\r\n                    className=\"message-input\"\r\n                />\r\n                <input type=\"file\" onChange={handleFileChange} />\r\n                <button onClick={handleMessageSend} className=\"send-button\">Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserChat;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}