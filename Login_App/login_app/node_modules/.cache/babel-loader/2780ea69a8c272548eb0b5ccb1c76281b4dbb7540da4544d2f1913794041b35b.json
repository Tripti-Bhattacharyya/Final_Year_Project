{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\doctors\\\\DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './DoctorDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorDashboard = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [approvedAppointments, setApprovedAppointments] = useState(() => {\n    // Retrieve approved appointments from local storage, or default to an empty array\n    const storedApprovedAppointments = localStorage.getItem('approvedAppointments');\n    return storedApprovedAppointments ? JSON.parse(storedApprovedAppointments) : [];\n  });\n  const fetchAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://localhost:9002/doctor-dashboard', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const filteredAppointments = response.data.filter(appointment => appointment.status !== 'Cancelled');\n      setAppointments(filteredAppointments);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n    }\n  };\n  useEffect(() => {\n    fetchAppointments();\n  }, []);\n  const handleApprove = async appointmentId => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put(`http://localhost:9002/appointments/${appointmentId}/approve`, null, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // Update local state to mark this appointment as approved\n      setApprovedAppointments(prev => [...prev, appointmentId]);\n      // After approval, fetch appointments again to update the list\n      localStorage.setItem('approvedAppointments', JSON.stringify([...approvedAppointments, appointmentId]));\n      fetchAppointments();\n    } catch (error) {\n      console.error('Error approving appointment:', error);\n    }\n  };\n  const handleDone = async appointmentId => {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Show a confirmation dialog with options\n      const confirmation = await new Promise(resolve => {\n        toast.info( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Are you sure you want to mark this appointment as done?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => resolve(true),\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              toast.dismiss();\n              resolve(false);\n            },\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), {\n          autoClose: false,\n          position: 'top-center',\n          // Set the position directly as a string\n          closeButton: false\n        });\n      });\n\n      // If user confirms, mark appointment as done\n      if (confirmation) {\n        await axios.delete(`http://localhost:9002/appointments/${appointmentId}/done`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        // After marking as done, fetch appointments again to update the list\n        fetchAppointments();\n        // Show a success toast notification\n        toast.success(\"Appointment marked as done successfully!\", {\n          position: 'top-center',\n          // Set the position directly as a string\n          autoClose: 3000\n        });\n      }\n    } catch (error) {\n      console.error('Error marking appointment as done:', error);\n    }\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const formattedDate = `${date.getDate().toString().padStart(2, '0')}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getFullYear()}`;\n    return formattedDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"doc-\",\n      children: \"Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"appointment-list\",\n      children: appointments.map(appointment => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"appointment-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-name\",\n          children: [\"User: \", appointment.userId.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"appointment-date\",\n          children: [\"Date: \", formatDate(appointment.date)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-slot\",\n          children: [\"Time Slot: \", appointment.timeSlot]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status\",\n          children: [\"Status: \", appointment.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), appointment.status !== 'Done' && !approvedAppointments.includes(appointment._id) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"approve-btn\",\n          onClick: () => handleApprove(appointment._id),\n          children: \"Approve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), appointment.status !== 'Done' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"done-btn\",\n          onClick: () => handleDone(appointment._id),\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, appointment._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorDashboard, \"9kJi8H03N2PVqCHUUB4JxZO18mw=\");\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","DoctorDashboard","_s","appointments","setAppointments","approvedAppointments","setApprovedAppointments","storedApprovedAppointments","localStorage","getItem","JSON","parse","fetchAppointments","token","response","get","headers","Authorization","filteredAppointments","data","filter","appointment","status","error","console","handleApprove","appointmentId","put","prev","setItem","stringify","handleDone","confirmation","Promise","resolve","info","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","dismiss","autoClose","position","closeButton","delete","success","formatDate","dateString","date","Date","formattedDate","getDate","toString","padStart","getMonth","getFullYear","className","map","userId","name","timeSlot","includes","_id","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/doctors/DoctorDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './DoctorDashboard.css';\r\n\r\nconst DoctorDashboard = () => {\r\n  const [appointments, setAppointments] = useState([]);\r\n \r\n  const [approvedAppointments, setApprovedAppointments] = useState(() => {\r\n    // Retrieve approved appointments from local storage, or default to an empty array\r\n    const storedApprovedAppointments = localStorage.getItem('approvedAppointments');\r\n    return storedApprovedAppointments ? JSON.parse(storedApprovedAppointments) : [];\r\n  });\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.get('http://localhost:9002/doctor-dashboard', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      const filteredAppointments = response.data.filter(appointment => appointment.status !== 'Cancelled');\r\n      setAppointments(filteredAppointments);\r\n    } catch (error) {\r\n      console.error('Error fetching appointments:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n  }, []);\r\n\r\n  const handleApprove = async (appointmentId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.put(`http://localhost:9002/appointments/${appointmentId}/approve`, null, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      // Update local state to mark this appointment as approved\r\n      setApprovedAppointments(prev => [...prev, appointmentId]);\r\n      // After approval, fetch appointments again to update the list\r\n      localStorage.setItem('approvedAppointments', JSON.stringify([...approvedAppointments, appointmentId]));\r\n      fetchAppointments();\r\n    } catch (error) {\r\n      console.error('Error approving appointment:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  const handleDone = async (appointmentId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      // Show a confirmation dialog with options\r\n      const confirmation = await new Promise((resolve) => {\r\n        toast.info(\r\n          <div>\r\n            <span>Are you sure you want to mark this appointment as done?</span>\r\n            <button onClick={() => resolve(true)}>Yes</button>\r\n            <button onClick={() => {\r\n              toast.dismiss(); \r\n              resolve(false);\r\n            }}>No</button>\r\n          </div>,\r\n          {\r\n            autoClose: false,\r\n            position: 'top-center', // Set the position directly as a string\r\n            closeButton: false,\r\n            \r\n          }\r\n        );\r\n      });\r\n\r\n      // If user confirms, mark appointment as done\r\n      if (confirmation) {\r\n        await axios.delete(`http://localhost:9002/appointments/${appointmentId}/done`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        // After marking as done, fetch appointments again to update the list\r\n        fetchAppointments();\r\n        // Show a success toast notification\r\n        toast.success(\"Appointment marked as done successfully!\", {\r\n          position: 'top-center', // Set the position directly as a string\r\n          autoClose: 3000\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking appointment as done:', error);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const formattedDate = `${date.getDate().toString().padStart(2, '0')}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getFullYear()}`;\r\n    return formattedDate;\r\n};\r\n\r\n  return (\r\n    <div className=\"doctor-dashboard-container\">\r\n    <h1 className='doc-'>Appointments</h1>\r\n    <ul className=\"appointment-list\"> \r\n      {appointments.map(appointment => (\r\n        <li key={appointment._id} className=\"appointment-item\"> \r\n          <div className=\"user-name\">User: {appointment.userId.name}</div> \r\n          <div className=\"appointment-date\">Date: {formatDate(appointment.date)}</div> \r\n          <div className=\"time-slot\">Time Slot: {appointment.timeSlot}</div>\r\n          <div className=\"status\">Status: {appointment.status}</div>\r\n          {appointment.status !== 'Done' && !approvedAppointments.includes(appointment._id) && (\r\n            <button className=\"approve-btn\" onClick={() => handleApprove(appointment._id)}>Approve</button>\r\n          )}\r\n          {appointment.status !== 'Done' && (\r\n            <button className=\"done-btn\" onClick={() => handleDone(appointment._id)}>Done</button>\r\n          )}\r\n        </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorDashboard;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}