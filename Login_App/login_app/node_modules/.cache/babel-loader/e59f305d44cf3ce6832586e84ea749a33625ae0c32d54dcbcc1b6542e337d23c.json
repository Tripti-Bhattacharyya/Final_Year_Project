{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\doctors\\\\DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorDashboard = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [approvedAppointments, setApprovedAppointments] = useState([]);\n  const fetchAppointments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://localhost:9002/doctor-dashboard', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const filteredAppointments = response.data.filter(appointment => appointment.status !== 'Cancelled');\n      setAppointments(filteredAppointments);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n    }\n  };\n  useEffect(() => {\n    fetchAppointments();\n  }, []);\n  const handleApprove = async appointmentId => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put(`http://localhost:9002/appointments/${appointmentId}/approve`, null, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // Update local state to mark this appointment as approved\n      setApprovedAppointments(prev => [...prev, appointmentId]);\n      // After approval, fetch appointments again to update the list\n      fetchAppointments();\n    } catch (error) {\n      console.error('Error approving appointment:', error);\n    }\n  };\n  const handleDone = async appointmentId => {\n    try {\n      // Display confirmation toast\n      toast.dark('Are you sure you want to mark this appointment as done?', {\n        position: 'top-right',\n        autoClose: false,\n        hideProgressBar: false,\n        closeOnClick: false,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        closeButton: true,\n        onClose: async () => {\n          // If user confirms, mark appointment as done\n          const token = localStorage.getItem('token');\n          await axios.delete(`http://localhost:9002/appointments/${appointmentId}/done`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          // After marking as done, fetch appointments again to update the list\n          fetchAppointments();\n        }\n      });\n    } catch (error) {\n      console.error('Error marking appointment as done:', error);\n    }\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const formattedDate = `${date.getDate().toString().padStart(2, '0')}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getFullYear()}`;\n    return formattedDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: appointments.map(appointment => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"User: \", appointment.userId.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Date: \", formatDate(appointment.date)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Time Slot: \", appointment.timeSlot]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Status: \", appointment.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), appointment.status !== 'Done' && !approvedAppointments.includes(appointment._id) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleApprove(appointment._id),\n          children: \"Approve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this), appointment.status !== 'Done' && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDone(appointment._id),\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this)]\n      }, appointment._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorDashboard, \"DmTEDIAfLrkKhTYVZCVyR49KQ/w=\");\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","DoctorDashboard","_s","appointments","setAppointments","approvedAppointments","setApprovedAppointments","fetchAppointments","token","localStorage","getItem","response","get","headers","Authorization","filteredAppointments","data","filter","appointment","status","error","console","handleApprove","appointmentId","put","prev","handleDone","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","closeButton","onClose","delete","formatDate","dateString","date","Date","formattedDate","getDate","toString","padStart","getMonth","getFullYear","children","fileName","_jsxFileName","lineNumber","columnNumber","map","userId","name","timeSlot","includes","_id","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/doctors/DoctorDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst DoctorDashboard = () => {\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [approvedAppointments, setApprovedAppointments] = useState([]);\r\n\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.get('http://localhost:9002/doctor-dashboard', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      const filteredAppointments = response.data.filter(appointment => appointment.status !== 'Cancelled');\r\n      setAppointments(filteredAppointments);\r\n    } catch (error) {\r\n      console.error('Error fetching appointments:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n  }, []);\r\n\r\n  const handleApprove = async (appointmentId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.put(`http://localhost:9002/appointments/${appointmentId}/approve`, null, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      // Update local state to mark this appointment as approved\r\n      setApprovedAppointments(prev => [...prev, appointmentId]);\r\n      // After approval, fetch appointments again to update the list\r\n      fetchAppointments();\r\n    } catch (error) {\r\n      console.error('Error approving appointment:', error);\r\n    }\r\n  };\r\n  \r\n  const handleDone = async (appointmentId) => {\r\n    try {\r\n      // Display confirmation toast\r\n      toast.dark('Are you sure you want to mark this appointment as done?', {\r\n        position: 'top-right',\r\n        autoClose: false,\r\n        hideProgressBar: false,\r\n        closeOnClick: false,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        closeButton: true,\r\n        onClose: async () => {\r\n          // If user confirms, mark appointment as done\r\n          const token = localStorage.getItem('token');\r\n          await axios.delete(`http://localhost:9002/appointments/${appointmentId}/done`, {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          });\r\n          // After marking as done, fetch appointments again to update the list\r\n          fetchAppointments();\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error marking appointment as done:', error);\r\n    }\r\n  };\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const formattedDate = `${date.getDate().toString().padStart(2, '0')}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getFullYear()}`;\r\n    return formattedDate;\r\n};\r\n\r\n  return (\r\n    <div>\r\n      <h1>Appointments</h1>\r\n      <ul>\r\n        {appointments.map(appointment => (\r\n          <li key={appointment._id}>\r\n            <div>User: {appointment.userId.name}</div>\r\n            <div>Date: {formatDate(appointment.date)}</div>\r\n            <div>Time Slot: {appointment.timeSlot}</div>\r\n            <div>Status: {appointment.status}</div>\r\n            {appointment.status !== 'Done' && !approvedAppointments.includes(appointment._id) && (\r\n              <button onClick={() => handleApprove(appointment._id)}>Approve</button>\r\n            )}\r\n            {appointment.status !== 'Done' && (\r\n              <button onClick={() => handleDone(appointment._id)}>Done</button>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorDashboard;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}