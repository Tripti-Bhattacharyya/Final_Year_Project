{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\DoctorChat.js\",\n  _s = $RefreshSig$();\n// DoctorChat.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport './DoctorChat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorChat = ({\n  user,\n  doctorId\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const socket = io('http://localhost:9002/doctor-chat');\n    console.log('Attempting to connect to WebSocket server...');\n    socket.emit('join', {\n      userId: user._id,\n      doctorId\n    });\n    socket.on('message', message => {\n      console.log('Received message:', message);\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      socket.disconnect(); // Disconnect when component unmounts\n    };\n  }, [user._id, doctorId]);\n  const handleMessageSend = () => {\n    if (message.trim()) {\n      const socket = io('http://localhost:9002/doctor-chat'); // Connect to server\n      socket.emit('sendMessage', {\n        userId: user._id,\n        doctorId,\n        message\n      }); // Swap userId and doctorId\n      setMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctor-chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"doctor-chat-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: msg.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), \": \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"doctor-chat-input\",\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"doctor-chat-send-button\",\n      onClick: handleMessageSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorChat, \"WDgp24k/FdZO6Mwa4GS0i45C6ek=\");\n_c = DoctorChat;\nexport default DoctorChat;\nvar _c;\n$RefreshReg$(_c, \"DoctorChat\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","DoctorChat","user","doctorId","_s","message","setMessage","messages","setMessages","socket","console","log","emit","userId","_id","on","prevMessages","disconnect","handleMessageSend","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","text","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/DoctorChat.js"],"sourcesContent":["// DoctorChat.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport './DoctorChat.css';\r\n\r\nconst DoctorChat = ({ user, doctorId  }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n \r\n\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:9002/doctor-chat'); \r\n    console.log('Attempting to connect to WebSocket server...');\r\n    socket.emit('join', { userId: user._id, doctorId}); \r\n\r\n    socket.on('message', message => {\r\n        console.log('Received message:', message);\r\n      setMessages(prevMessages => [...prevMessages, message]);\r\n    });\r\n\r\n    return () => {\r\n        console.log('Cleaning up WebSocket connection...');\r\n      socket.disconnect(); // Disconnect when component unmounts\r\n    };\r\n  }, [user._id, doctorId]);\r\n\r\n  const handleMessageSend = () => {\r\n    if (message.trim()) {\r\n      const socket = io('http://localhost:9002/doctor-chat'); // Connect to server\r\n      socket.emit('sendMessage', {  userId: user._id, doctorId, message }); // Swap userId and doctorId\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"doctor-chat-container\">\r\n      <h2>Chat with User</h2> {/* Update heading to indicate user chat */}\r\n      <div className=\"doctor-chat-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div className=\"doctor-chat-message\" key={index}>\r\n            <strong>{msg.user}</strong>: {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        className=\"doctor-chat-input\"\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={e => setMessage(e.target.value)}\r\n      />\r\n      <button className=\"doctor-chat-send-button\" onClick={handleMessageSend}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorChat;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}