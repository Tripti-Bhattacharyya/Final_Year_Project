{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\DoctorChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorChat = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const {\n    doctorId\n  } = useParams();\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        // Fetch list of users who sent messages to the doctor\n        const response = await axios.get(`http://localhost:9002/doctor-messages/${doctorId}`);\n        setUsers(response.data);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    };\n    fetchUsers();\n  }, [doctorId]);\n  const handleUserClick = async user => {\n    try {\n      setSelectedUser(user);\n      // Fetch chat history between the doctor and the selected user\n      const response = await axios.get(`http://localhost:9002/chat-history/${doctorId}/${user._id}`);\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Doctor Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleUserClick(user),\n        children: user.name\n      }, user._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chat with \", selectedUser.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: message.content\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(DoctorChat, \"QyqSRgVN0adE09rxI0tbTII3lg8=\", false, function () {\n  return [useParams];\n});\n_c = DoctorChat;\nexport default DoctorChat;\nvar _c;\n$RefreshReg$(_c, \"DoctorChat\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","DoctorChat","_s","users","setUsers","selectedUser","setSelectedUser","messages","setMessages","doctorId","fetchUsers","response","get","data","error","console","handleUserClick","user","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","name","message","content","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/DoctorChat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst DoctorChat = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const { doctorId } = useParams();\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                // Fetch list of users who sent messages to the doctor\r\n                const response = await axios.get(`http://localhost:9002/doctor-messages/${doctorId}`);\r\n                setUsers(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n\r\n        fetchUsers();\r\n    }, [doctorId]);\r\n\r\n    const handleUserClick = async (user) => {\r\n        try {\r\n            setSelectedUser(user);\r\n            // Fetch chat history between the doctor and the selected user\r\n            const response = await axios.get(`http://localhost:9002/chat-history/${doctorId}/${user._id}`);\r\n            setMessages(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching chat history:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Doctor Chat</h2>\r\n            <ul>\r\n                {users.map(user => (\r\n                    <li key={user._id} onClick={() => handleUserClick(user)}>\r\n                        {user.name}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedUser && (\r\n                <div>\r\n                    <h3>Chat with {selectedUser.name}</h3>\r\n                    <ul>\r\n                        {messages.map(message => (\r\n                            <li key={message._id}>\r\n                                {message.content}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DoctorChat;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}