{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\doctors\\\\DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorDashboard = () => {\n  _s();\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        // Make a GET request to the backend route /doctor-dashboard\n        const response = await axios.get('/doctor-dashboard');\n\n        // Set the retrieved data to the state\n        setDashboardData(response.data);\n        setLoading(false);\n      } catch (error) {\n        // Handle errors\n        setError(error.response.data.message);\n        setLoading(false);\n      }\n    };\n\n    // Call the fetchDashboardData function when the component mounts\n    fetchDashboardData();\n  }, []);\n\n  // Render loading state while fetching data\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading dashboard data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render error message if there's an error\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the doctor's dashboard UI using the fetched data\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Doctor Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), dashboardData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Dashboard Data: \", JSON.stringify(dashboardData)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorDashboard, \"sxFeAcwAVC244uU+brsBFLqW91s=\");\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","DoctorDashboard","_s","dashboardData","setDashboardData","loading","setLoading","error","setError","fetchDashboardData","response","get","data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/doctors/DoctorDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DoctorDashboard = () => {\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        // Make a GET request to the backend route /doctor-dashboard\r\n        const response = await axios.get('/doctor-dashboard');\r\n\r\n        // Set the retrieved data to the state\r\n        setDashboardData(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        // Handle errors\r\n        setError(error.response.data.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Call the fetchDashboardData function when the component mounts\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  // Render loading state while fetching data\r\n  if (loading) {\r\n    return <p>Loading dashboard data...</p>;\r\n  }\r\n\r\n  // Render error message if there's an error\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  // Render the doctor's dashboard UI using the fetched data\r\n  return (\r\n    <div>\r\n      <h1>Doctor Dashboard</h1>\r\n      {/* Render dashboard data here */}\r\n      {dashboardData && (\r\n        <div>\r\n          {/* Render relevant dashboard components based on the fetched data */}\r\n          <p>Dashboard Data: {JSON.stringify(dashboardData)}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorDashboard;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMY,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,mBAAmB,CAAC;;QAErD;QACAP,gBAAgB,CAACM,QAAQ,CAACE,IAAI,CAAC;QAC/BN,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAC,QAAQ,CAACD,KAAK,CAACG,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;QACrCP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACAG,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIJ,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAc,QAAA,EAAG;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACzC;;EAEA;EACA,IAAIX,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAc,QAAA,GAAG,SAAO,EAACP,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;;EAEA;EACA,oBACElB,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAExBf,aAAa,iBACZH,OAAA;MAAAc,QAAA,eAEEd,OAAA;QAAAc,QAAA,GAAG,kBAAgB,EAACK,IAAI,CAACC,SAAS,CAACjB,aAAa,CAAC;MAAA;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChB,EAAA,CAhDID,eAAe;AAAAoB,EAAA,GAAfpB,eAAe;AAkDrB,eAAeA,eAAe;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}