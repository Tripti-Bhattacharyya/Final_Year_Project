{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\Final-Year-Project\\\\Login_App\\\\login_app\\\\src\\\\components\\\\Chat\\\\UserChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport './UserChat.css'; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserChat = user => {\n  _s();\n  console.log(user.user);\n  const {\n    userId,\n    doctorId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [file, setFile] = useState(null);\n  const socket = useRef(null); // Store socket instance in a ref\n\n  const messageInputRef = useRef(null);\n  useEffect(() => {\n    // Initialize socket connection only once\n    socket.current = io('http://localhost:9002', {\n      query: {\n        userId: user.user\n      }\n    });\n\n    // Retrieve initial messages\n    socket.current.emit('getMessages', {\n      userId,\n      doctorId\n    });\n\n    // Listen for new messages\n    socket.current.on('messages', initialMessages => {\n      setMessages(initialMessages);\n    });\n\n    // Log when setting up the event listener for incoming messages\n    console.log(\"Setting up event listener for incoming messages\");\n\n    // Listen for incoming messages\n    socket.current.on('message', message => {\n      console.log(\"Received message:\", message);\n      setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\n    });\n\n    // Clean up event listeners\n    return () => {\n      if (socket.current) {\n        socket.current.off('messages');\n        socket.current.off('message');\n      }\n    };\n  }, [doctorId, userId, user.user]);\n\n  // Inside UserChat component\n\n  const handleMessageSend = () => {\n    if (newMessage.trim() === '' && !file) return;\n    if (file) {\n      const formData = new FormData();\n      formData.append('userId', userId);\n      formData.append('doctorId', doctorId);\n      formData.append('file', file);\n      socket.current.emit('sendFile', formData); // Emit form data for file\n    } else {\n      // If it's a text message, directly emit it\n      socket.current.emit('sendMessage', {\n        userId,\n        doctorId,\n        content: newMessage\n      });\n    }\n    setNewMessage('');\n    setFile(null);\n    // Focus the input field after sending the message\n    messageInputRef.current.focus();\n  };\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.senderId === user.user ? 'left' : 'right'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-timestamp\",\n          children: message.createdAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        ref: messageInputRef,\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSend,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(UserChat, \"MiPIWFLwwVYMHGQx0l4ilIqgMu8=\", false, function () {\n  return [useParams];\n});\n_c = UserChat;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","io","jsxDEV","_jsxDEV","UserChat","user","_s","console","log","userId","doctorId","messages","setMessages","newMessage","setNewMessage","file","setFile","socket","messageInputRef","current","query","emit","on","initialMessages","message","prevMessages","off","handleMessageSend","trim","formData","FormData","append","content","focus","handleFileChange","e","selectedFile","target","files","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","senderId","createdAt","_id","type","value","onChange","ref","onClick","_c","$RefreshReg$"],"sources":["E:/FYP/Final-Year-Project/Login_App/login_app/src/components/Chat/UserChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport './UserChat.css'; // Import CSS file\r\n\r\nconst UserChat = (user) => {\r\n    console.log(user.user);\r\n    const { userId, doctorId } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [file, setFile] = useState(null);\r\n    const socket = useRef(null); // Store socket instance in a ref\r\n\r\n    const messageInputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Initialize socket connection only once\r\n        socket.current = io('http://localhost:9002', {\r\n            query: {\r\n                userId: user.user,\r\n            }\r\n        });\r\n    \r\n        // Retrieve initial messages\r\n        socket.current.emit('getMessages', { userId, doctorId });\r\n    \r\n        // Listen for new messages\r\n        socket.current.on('messages', (initialMessages) => {\r\n            setMessages(initialMessages);\r\n        });\r\n    \r\n        // Log when setting up the event listener for incoming messages\r\n        console.log(\"Setting up event listener for incoming messages\");\r\n    \r\n        // Listen for incoming messages\r\n        socket.current.on('message', (message) => {\r\n            console.log(\"Received message:\", message);\r\n            setMessages(prevMessages => [...prevMessages, message]); // Append the new message to the list\r\n        });\r\n    \r\n        // Clean up event listeners\r\n        return () => {\r\n            if (socket.current) {\r\n                socket.current.off('messages');\r\n                socket.current.off('message');\r\n            }\r\n        };\r\n    }, [doctorId, userId, user.user]);\r\n    \r\n\r\n   \r\n\r\n// Inside UserChat component\r\n\r\nconst handleMessageSend = () => {\r\n    if (newMessage.trim() === '' && !file) return;\r\n\r\n    if (file) {\r\n        const formData = new FormData();\r\n        formData.append('userId', userId);\r\n        formData.append('doctorId', doctorId);\r\n        formData.append('file', file); \r\n\r\n        socket.current.emit('sendFile', formData); // Emit form data for file\r\n    } else {\r\n        // If it's a text message, directly emit it\r\n        socket.current.emit('sendMessage', { userId, doctorId, content: newMessage });\r\n    }\r\n\r\n    setNewMessage('');\r\n    setFile(null);\r\n    // Focus the input field after sending the message\r\n    messageInputRef.current.focus();\r\n};\r\n\r\n    const handleFileChange = (e) => {\r\n        const selectedFile = e.target.files[0];\r\n        setFile(selectedFile);\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-chat-container\">\r\n            <h2>Chat</h2>\r\n            <div className=\"chat-messages\">\r\n    {messages.map((message) => (\r\n        <div key={message._id} className={`message ${message.senderId === user.user ? 'left' : 'right'}`}>\r\n            <p className=\"message-content\">{message.content}</p>\r\n            <span className=\"message-timestamp\">{message.createdAt}</span>\r\n        </div>\r\n    ))}\r\n</div>\r\n\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    ref={messageInputRef}\r\n                    className=\"message-input\"\r\n                />\r\n                <input type=\"file\" onChange={handleFileChange} />\r\n                <button onClick={handleMessageSend} className=\"send-button\">Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserChat;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}